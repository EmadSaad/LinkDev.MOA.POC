//         Project / File: LinkDev.MOA.POC.Entities / CrmSchema_Case.cs
// File generated by: CRM Code Generator - Ahmed Elsawalhy (Yagasoft.com)

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Xml.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Reflection;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;

namespace LinkDev.MOA.POC.Entities
{

	#region Entities

	#region Case

	/// <summary>
	/// 'Incident'.<br />
	/// Service request case associated with a contract.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("incident")]
	public partial class Case : GeneratedEntity<Case.RelationName>
	{
		public Case() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public Case(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public Case(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = "Case";
		public const string SchemaName = "Incident";
		public const string EntityLogicalName = "incident";
		public const int EntityTypeCode = 112;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Attributes

		[AttributeLogicalName("incidentid")]
		public override System.Guid Id
		{
			get => (CaseId == null || CaseId == Guid.Empty) ? base.Id : CaseId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("incidentid");
                    base.Id = value;
                } else {
				    CaseId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'AccountId'.<br />
        /// Unique identifier of the account with which the case is associated.
        /// </summary>
		[AttributeLogicalName("accountid")]
		public Guid? Account
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("accountid");
                return value?.Id;
			}
		}

        public string AccountName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("accountid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ActivitiesComplete'.<br />
        /// This attribute is used for Sample Service Business Processes.
        /// </summary>
		[AttributeLogicalName("activitiescomplete")]
		public bool? ActivitiesComplete
		{
			get
			{
				var value = GetAttributeValue<bool?>("activitiescomplete");
			    return value;
			}
			set
			{
                SetAttributeValue("activitiescomplete", value);
			}
		}

        public IDictionary<int, string> ActivitiesCompleteLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("activitiescomplete");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("activitiescomplete", (bool) value ? 1 : 0, 1033) },
                             { 1025, Enums.GetLabel("activitiescomplete", (bool) value ? 1 : 0, 1025) },
                        };
            }
        }

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'ActualServiceUnits'.<br />
        /// Type the number of service units that were actually required to resolve the case.
        /// </summary>
		[AttributeLogicalName("actualserviceunits")]
		public int? ActualServiceUnits
		{
			get
			{
				var value = GetAttributeValue<int?>("actualserviceunits");
			    return value;
			}
			set
			{
                SetAttributeValue("actualserviceunits", value);
			}
		}

		[AttributeLogicalName("adx_createdbyipaddress")]
		public string CreatedByIPAddress
		{
			get
			{
				var value = GetAttributeValue<string>("adx_createdbyipaddress");
			    return value;
			}
			set
			{
                SetAttributeValue("adx_createdbyipaddress", value);
			}
		}

		[AttributeLogicalName("adx_createdbyusername")]
		public string CreatedByUsername
		{
			get
			{
				var value = GetAttributeValue<string>("adx_createdbyusername");
			    return value;
			}
			set
			{
                SetAttributeValue("adx_createdbyusername", value);
			}
		}

		[AttributeLogicalName("adx_modifiedbyipaddress")]
		public string ModifiedByIPAddress
		{
			get
			{
				var value = GetAttributeValue<string>("adx_modifiedbyipaddress");
			    return value;
			}
			set
			{
                SetAttributeValue("adx_modifiedbyipaddress", value);
			}
		}

		[AttributeLogicalName("adx_modifiedbyusername")]
		public string ModifiedByUsername
		{
			get
			{
				var value = GetAttributeValue<string>("adx_modifiedbyusername");
			    return value;
			}
			set
			{
                SetAttributeValue("adx_modifiedbyusername", value);
			}
		}

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'BilledServiceUnits'.<br />
        /// Type the number of service units that were billed to the customer for the case.
        /// </summary>
		[AttributeLogicalName("billedserviceunits")]
		public int? BilledServiceUnits
		{
			get
			{
				var value = GetAttributeValue<int?>("billedserviceunits");
			    return value;
			}
			set
			{
                SetAttributeValue("billedserviceunits", value);
			}
		}

        /// <summary>
        ///  
		/// 'BlockedProfile'.<br />
        /// Details whether the profile is blocked or not.
        /// </summary>
		[AttributeLogicalName("blockedprofile")]
		public bool? BlockedProfile
		{
			get
			{
				var value = GetAttributeValue<bool?>("blockedprofile");
			    return value;
			}
			set
			{
                SetAttributeValue("blockedprofile", value);
			}
		}

        public IDictionary<int, string> BlockedProfileLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("blockedprofile");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("blockedprofile", (bool) value ? 1 : 0, 1033) },
                             { 1025, Enums.GetLabel("blockedprofile", (bool) value ? 1 : 0, 1025) },
                        };
            }
        }

        /// <summary>
        ///  
		/// 'CaseOriginCode'.<br />
        /// Select how contact about the case was originated, such as email, phone, or web, for use in reporting and analysis.
        /// </summary>
		[AttributeLogicalName("caseorigincode")]
		public OriginEnum? Origin
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("caseorigincode");
                return (OriginEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("caseorigincode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("caseorigincode", value);
			}
		}

        public IDictionary<int, string> OriginLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("caseorigincode");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("caseorigincode", value.Value, 1033) },
                             { 1025, Enums.GetLabel("caseorigincode", value.Value, 1025) },
                        };
            }
        }

        /// <summary>
        ///  
		/// 'CaseTypeCode'.<br />
        /// Select the type of case to identify the incident for use in case routing and analysis.
        /// </summary>
		[AttributeLogicalName("casetypecode")]
		public CaseType_CaseTypeCodeEnum? CaseType_CaseTypeCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("casetypecode");
                return (CaseType_CaseTypeCodeEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("casetypecode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("casetypecode", value);
			}
		}

        public IDictionary<int, string> CaseType_CaseTypeCodeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("casetypecode");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("casetypecode", value.Value, 1033) },
                             { 1025, Enums.GetLabel("casetypecode", value.Value, 1025) },
                        };
            }
        }

        /// <summary>
        ///  
		/// 'CheckEmail'.<br />
        /// This attribute is used for Sample Service Business Processes.
        /// </summary>
		[AttributeLogicalName("checkemail")]
		public bool? CheckEmail
		{
			get
			{
				var value = GetAttributeValue<bool?>("checkemail");
			    return value;
			}
			set
			{
                SetAttributeValue("checkemail", value);
			}
		}

        public IDictionary<int, string> CheckEmailLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("checkemail");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("checkemail", (bool) value ? 1 : 0, 1033) },
                             { 1025, Enums.GetLabel("checkemail", (bool) value ? 1 : 0, 1025) },
                        };
            }
        }

        /// <summary>
        ///  
		/// 'ContactId'.<br />
        /// Unique identifier of the contact associated with the case.
        /// </summary>
		[AttributeLogicalName("contactid")]
		public Guid? Contact_ContactId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("contactid");
                return value?.Id;
			}
		}

        public string Contact_ContactIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("contactid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ContractDetailId'.<br />
        /// Choose the contract line that the case should be logged under to make sure the customer is charged correctly.
        /// </summary>
		[AttributeLogicalName("contractdetailid")]
		public Guid? ContractLine
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("contractdetailid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("contractdetailid", new EntityReference("contractdetail", value.Value));
                else
	                SetAttributeValue("contractdetailid", value);
			}
		}

        public string ContractLineName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("contractdetailid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ContractId'.<br />
        /// Choose the service contract that the case should be logged under to make sure the customer is eligible for support services.
        /// </summary>
		[AttributeLogicalName("contractid")]
		public Guid? Contract
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("contractid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("contractid", new EntityReference("contract", value.Value));
                else
	                SetAttributeValue("contractid", value);
			}
		}

        public string ContractName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("contractid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ContractServiceLevelCode'.<br />
        /// Select the service level for the case to make sure the case is handled correctly.
        /// </summary>
		[AttributeLogicalName("contractservicelevelcode")]
		public ServiceLevelEnum? ServiceLevel
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("contractservicelevelcode");
                return (ServiceLevelEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("contractservicelevelcode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("contractservicelevelcode", value);
			}
		}

        public IDictionary<int, string> ServiceLevelLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("contractservicelevelcode");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("contractservicelevelcode", value.Value, 1033) },
                             { 1025, Enums.GetLabel("contractservicelevelcode", value.Value, 1025) },
                        };
            }
        }

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Shows who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Id;
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CreatedByExternalParty'.<br />
        /// Shows the external party who created the record.
        /// </summary>
		[AttributeLogicalName("createdbyexternalparty")]
		public Guid? CreatedByExternalParty
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdbyexternalparty");
                return value?.Id;
			}
		}

        public string CreatedByExternalPartyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdbyexternalparty");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Shows who created the record on behalf of another user.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Id;
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CustomerContacted'.<br />
        /// Tells whether customer service representative has contacted the customer or not.
        /// </summary>
		[AttributeLogicalName("customercontacted")]
		public bool? CustomerContacted
		{
			get
			{
				var value = GetAttributeValue<bool?>("customercontacted");
			    return value;
			}
			set
			{
                SetAttributeValue("customercontacted", value);
			}
		}

        public IDictionary<int, string> CustomerContactedLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("customercontacted");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("customercontacted", (bool) value ? 1 : 0, 1033) },
                             { 1025, Enums.GetLabel("customercontacted", (bool) value ? 1 : 0, 1025) },
                        };
            }
        }

        /// <summary>
        ///  
		/// 'CustomerId'.<br />
        /// Select the customer account or contact to provide a quick link to additional customer details, such as account information, activities, and opportunities.
        /// </summary>
		[AttributeLogicalName("customerid")]
		public EntityReference Customer
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("customerid");
			    return value;
			}
			set
			{
                SetAttributeValue("customerid", value);
			}
		}

        public string CustomerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("customerid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CustomerSatisfactionCode'.<br />
        /// Select the customer's level of satisfaction with the handling and resolution of the case.
        /// </summary>
		[AttributeLogicalName("customersatisfactioncode")]
		public SatisfactionEnum? Satisfaction
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("customersatisfactioncode");
                return (SatisfactionEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("customersatisfactioncode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("customersatisfactioncode", value);
			}
		}

        public IDictionary<int, string> SatisfactionLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("customersatisfactioncode");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("customersatisfactioncode", value.Value, 1033) },
                             { 1025, Enums.GetLabel("customersatisfactioncode", value.Value, 1025) },
                        };
            }
        }

        /// <summary>
        ///  
		/// 'DecrementEntitlementTerm'.<br />
        /// Shows whether terms of the associated entitlement should be decremented or not.
        /// </summary>
		[AttributeLogicalName("decremententitlementterm")]
		public bool? DecrementEntitlementTerms
		{
			get
			{
				var value = GetAttributeValue<bool?>("decremententitlementterm");
			    return value;
			}
			set
			{
                SetAttributeValue("decremententitlementterm", value);
			}
		}

        public IDictionary<int, string> DecrementEntitlementTermsLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("decremententitlementterm");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("decremententitlementterm", (bool) value ? 1 : 0, 1033) },
                             { 1025, Enums.GetLabel("decremententitlementterm", (bool) value ? 1 : 0, 1025) },
                        };
            }
        }

        /// <summary>
        /// [MaxLength=2000] 
		/// 'Description'.<br />
        /// Type additional information to describe the case to assist the service team in reaching a resolution.
        /// </summary>
		[AttributeLogicalName("description")]
		public string Description
		{
			get
			{
				var value = GetAttributeValue<string>("description");
			    return value;
			}
			set
			{
                SetAttributeValue("description", value);
			}
		}

        /// <summary>
        /// [MaxLength=100] 
		/// 'EmailAddress'.<br />
        /// The primary email address for the entity.
        /// </summary>
		[AttributeLogicalName("emailaddress")]
		public string EmailAddress
		{
			get
			{
				var value = GetAttributeValue<string>("emailaddress");
			    return value;
			}
			set
			{
                SetAttributeValue("emailaddress", value);
			}
		}

        /// <summary>
        ///  
		/// 'EntitlementId'.<br />
        /// Choose the entitlement that is applicable for the case.
        /// </summary>
		[AttributeLogicalName("entitlementid")]
		public Guid? Entitlement
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("entitlementid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("entitlementid", new EntityReference("entitlement", value.Value));
                else
	                SetAttributeValue("entitlementid", value);
			}
		}

        public string EntitlementName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("entitlementid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'EntityImage'.<br />
        /// The default image for the entity.
        /// </summary>
		[AttributeLogicalName("entityimage")]
		public byte[] EntityImage
		{
			get
			{
				var value = GetAttributeValue<byte[]>("entityimage");
			    return value;
			}
			set
			{
                SetAttributeValue("entityimage", value);
			}
		}

        /// <summary>
        ///  
		/// 'EntityImage_Timestamp'.<br />
        ///  
        /// </summary>
		[AttributeLogicalName("entityimage_timestamp")]
		public long? EntityImage_Timestamp
		{
			get
			{
				var value = GetAttributeValue<long?>("entityimage_timestamp");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'EntityImage_URL'.<br />
        ///  
        /// </summary>
		[AttributeLogicalName("entityimage_url")]
		public string EntityImage_URL
		{
			get
			{
				var value = GetAttributeValue<string>("entityimage_url");
			    return value;
			}
		}

		[AttributeLogicalName("entityimageid")]
		public Guid? EntityImageId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("entityimageid");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'EscalatedOn'.<br />
        /// Indicates the date and time when the case was escalated.
        /// </summary>
		[AttributeLogicalName("escalatedon")]
		public DateTime? EscalatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("escalatedon");
			    return value;
			}
		}

        /// <summary>
        /// [Range(0.0000000001, 100000000000)] 
		/// 'ExchangeRate'.<br />
        /// Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.
        /// </summary>
		[AttributeLogicalName("exchangerate")]
		public decimal? ExchangeRate
		{
			get
			{
				var value = GetAttributeValue<decimal?>("exchangerate");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ExistingCase'.<br />
        /// Select an existing case for the customer that has been populated. For internal use only.
        /// </summary>
		[AttributeLogicalName("existingcase")]
		public Guid? ExistingCase
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("existingcase");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("existingcase", new EntityReference("incident", value.Value));
                else
	                SetAttributeValue("existingcase", value);
			}
		}

        public string ExistingCaseName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("existingcase");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'FirstResponseByKPIId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("firstresponsebykpiid")]
		public Guid? FirstResponseByKPI
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("firstresponsebykpiid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("firstresponsebykpiid", new EntityReference("slakpiinstance", value.Value));
                else
	                SetAttributeValue("firstresponsebykpiid", value);
			}
		}

        public string FirstResponseByKPIName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("firstresponsebykpiid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'FirstResponseSent'.<br />
        /// Indicates if the first response has been sent.
        /// </summary>
		[AttributeLogicalName("firstresponsesent")]
		public bool? FirstResponseSent
		{
			get
			{
				var value = GetAttributeValue<bool?>("firstresponsesent");
			    return value;
			}
			set
			{
                SetAttributeValue("firstresponsesent", value);
			}
		}

        public IDictionary<int, string> FirstResponseSentLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("firstresponsesent");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("firstresponsesent", (bool) value ? 1 : 0, 1033) },
                             { 1025, Enums.GetLabel("firstresponsesent", (bool) value ? 1 : 0, 1025) },
                        };
            }
        }

        /// <summary>
        ///  
		/// 'FirstResponseSLAStatus'.<br />
        /// Shows the status of the initial response time for the case according to the terms of the SLA.
        /// </summary>
		[AttributeLogicalName("firstresponseslastatus")]
		public FirstResponseSLAStatusEnum? FirstResponseSLAStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("firstresponseslastatus");
                return (FirstResponseSLAStatusEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("firstresponseslastatus", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("firstresponseslastatus", value);
			}
		}

        public IDictionary<int, string> FirstResponseSLAStatusLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("firstresponseslastatus");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("firstresponseslastatus", value.Value, 1033) },
                             { 1025, Enums.GetLabel("firstresponseslastatus", value.Value, 1025) },
                        };
            }
        }

        /// <summary>
        ///  
		/// 'FollowupBy'.<br />
        /// Enter the date by which a customer service representative has to follow up with the customer on this case.
        /// </summary>
		[AttributeLogicalName("followupby")]
		public DateTime? FollowUpBy
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("followupby");
			    return value;
			}
			set
			{
                SetAttributeValue("followupby", value);
			}
		}

        /// <summary>
        ///  
		/// 'FollowUpTaskCreated'.<br />
        /// This attribute is used for Sample Service Business Processes.
        /// </summary>
		[AttributeLogicalName("followuptaskcreated")]
		public bool? FollowupTaskCreated
		{
			get
			{
				var value = GetAttributeValue<bool?>("followuptaskcreated");
			    return value;
			}
			set
			{
                SetAttributeValue("followuptaskcreated", value);
			}
		}

        public IDictionary<int, string> FollowupTaskCreatedLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("followuptaskcreated");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("followuptaskcreated", (bool) value ? 1 : 0, 1033) },
                             { 1025, Enums.GetLabel("followuptaskcreated", (bool) value ? 1 : 0, 1025) },
                        };
            }
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber")]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
			    return value;
			}
			set
			{
                SetAttributeValue("importsequencenumber", value);
			}
		}

        /// <summary>
        ///  
		/// 'IncidentId'.<br />
        /// Unique identifier of the case.
        /// </summary>
		[AttributeLogicalName("incidentid")]
		public Guid? CaseId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("incidentid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("incidentid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

        /// <summary>
        ///  
		/// 'IncidentStageCode'.<br />
        /// Select the current stage of the service process for the case to assist service team members when they review or transfer a case.
        /// </summary>
		[AttributeLogicalName("incidentstagecode")]
		public CaseStageEnum? CaseStage
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("incidentstagecode");
                return (CaseStageEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("incidentstagecode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("incidentstagecode", value);
			}
		}

        public IDictionary<int, string> CaseStageLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("incidentstagecode");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("incidentstagecode", value.Value, 1033) },
                             { 1025, Enums.GetLabel("incidentstagecode", value.Value, 1025) },
                        };
            }
        }

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'InfluenceScore'.<br />
        /// Will contain the Influencer score coming from NetBreeze.
        /// </summary>
		[AttributeLogicalName("influencescore")]
		public double? InfluenceScore
		{
			get
			{
				var value = GetAttributeValue<double?>("influencescore");
			    return value;
			}
			set
			{
                SetAttributeValue("influencescore", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsDecrementing'.<br />
        /// For system use only.
        /// </summary>
		[AttributeLogicalName("isdecrementing")]
		public bool? Decrementing
		{
			get
			{
				var value = GetAttributeValue<bool?>("isdecrementing");
			    return value;
			}
			set
			{
                SetAttributeValue("isdecrementing", value);
			}
		}

        public IDictionary<int, string> DecrementingLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("isdecrementing");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("isdecrementing", (bool) value ? 1 : 0, 1033) },
                             { 1025, Enums.GetLabel("isdecrementing", (bool) value ? 1 : 0, 1025) },
                        };
            }
        }

        /// <summary>
        ///  
		/// 'IsEscalated'.<br />
        /// Indicates if the case has been escalated.
        /// </summary>
		[AttributeLogicalName("isescalated")]
		public bool? IsEscalated
		{
			get
			{
				var value = GetAttributeValue<bool?>("isescalated");
			    return value;
			}
			set
			{
                SetAttributeValue("isescalated", value);
			}
		}

        public IDictionary<int, string> IsEscalatedLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("isescalated");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("isescalated", (bool) value ? 1 : 0, 1033) },
                             { 1025, Enums.GetLabel("isescalated", (bool) value ? 1 : 0, 1025) },
                        };
            }
        }

        /// <summary>
        ///  
		/// 'KbArticleId'.<br />
        /// Choose the article that contains additional information or a resolution for the case, for reference during research or follow up with the customer.
        /// </summary>
		[AttributeLogicalName("kbarticleid")]
		public Guid? KnowledgeBaseArticle
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("kbarticleid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("kbarticleid", new EntityReference("kbarticle", value.Value));
                else
	                SetAttributeValue("kbarticleid", value);
			}
		}

        public string KnowledgeBaseArticleName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("kbarticleid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'LastOnHoldTime'.<br />
        /// Contains the date time stamp of the last on hold time.
        /// </summary>
		[AttributeLogicalName("lastonholdtime")]
		public DateTime? LastOnHoldTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("lastonholdtime");
			    return value;
			}
			set
			{
                SetAttributeValue("lastonholdtime", value);
			}
		}

		[AttributeLogicalName("ldv_arrivingport")]
		public Guid? ArrivingPort
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_arrivingport");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_arrivingport", new EntityReference("ldv_arrivingport", value.Value));
                else
	                SetAttributeValue("ldv_arrivingport", value);
			}
		}

        public string ArrivingPortName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_arrivingport");
                return value?.Name;
            }
        }

		[AttributeLogicalName("ldv_availablepharmacy")]
		public Guid? AvailablePharmacy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_availablepharmacy");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_availablepharmacy", new EntityReference("account", value.Value));
                else
	                SetAttributeValue("ldv_availablepharmacy", value);
			}
		}

        public string AvailablePharmacyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_availablepharmacy");
                return value?.Name;
            }
        }

		[AttributeLogicalName("ldv_casetype")]
		public CaseType_ldv_CaseTypeEnum? CaseType_ldv_CaseType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_casetype");
                return (CaseType_ldv_CaseTypeEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_casetype", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("ldv_casetype", value);
			}
		}

        public IDictionary<int, string> CaseType_ldv_CaseTypeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("ldv_casetype");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("ldv_casetype", value.Value, 1033) },
                             { 1025, Enums.GetLabel("ldv_casetype", value.Value, 1025) },
                        };
            }
        }

		[AttributeLogicalName("ldv_changeappointmenttype")]
		public ChangeAppointmentTypeEnum? ChangeAppointmentType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_changeappointmenttype");
                return (ChangeAppointmentTypeEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_changeappointmenttype", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("ldv_changeappointmenttype", value);
			}
		}

        public IDictionary<int, string> ChangeAppointmentTypeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("ldv_changeappointmenttype");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("ldv_changeappointmenttype", value.Value, 1033) },
                             { 1025, Enums.GetLabel("ldv_changeappointmenttype", value.Value, 1025) },
                        };
            }
        }

		[AttributeLogicalName("ldv_checkstock")]
		public bool? CheckStock
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_checkstock");
			    return value;
			}
			set
			{
                SetAttributeValue("ldv_checkstock", value);
			}
		}

        public IDictionary<int, string> CheckStockLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("ldv_checkstock");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("ldv_checkstock", (bool) value ? 1 : 0, 1033) },
                             { 1025, Enums.GetLabel("ldv_checkstock", (bool) value ? 1 : 0, 1025) },
                        };
            }
        }

		[AttributeLogicalName("ldv_childcase")]
		public Guid? ChildCase
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_childcase");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_childcase", new EntityReference("incident", value.Value));
                else
	                SetAttributeValue("ldv_childcase", value);
			}
		}

        public string ChildCaseName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_childcase");
                return value?.Name;
            }
        }

		[AttributeLogicalName("ldv_clinic")]
		public Guid? Clinic
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_clinic");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_clinic", new EntityReference("account", value.Value));
                else
	                SetAttributeValue("ldv_clinic", value);
			}
		}

        public string ClinicName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_clinic");
                return value?.Name;
            }
        }

		[AttributeLogicalName("ldv_comment")]
		public string Comment
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_comment");
			    return value;
			}
			set
			{
                SetAttributeValue("ldv_comment", value);
			}
		}

		[AttributeLogicalName("ldv_completecheckavailableappointmentstask")]
		public CompleteCheckAvailableAppointmentsTaskEnum? CompleteCheckAvailableAppointmentsTask
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_completecheckavailableappointmentstask");
                return (CompleteCheckAvailableAppointmentsTaskEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_completecheckavailableappointmentstask", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("ldv_completecheckavailableappointmentstask", value);
			}
		}

        public IDictionary<int, string> CompleteCheckAvailableAppointmentsTaskLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("ldv_completecheckavailableappointmentstask");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("ldv_completecheckavailableappointmentstask", value.Value, 1033) },
                             { 1025, Enums.GetLabel("ldv_completecheckavailableappointmentstask", value.Value, 1025) },
                        };
            }
        }

		[AttributeLogicalName("ldv_completephonecalltask")]
		public bool? CompletePhoneCallTask
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_completephonecalltask");
			    return value;
			}
			set
			{
                SetAttributeValue("ldv_completephonecalltask", value);
			}
		}

        public IDictionary<int, string> CompletePhoneCallTaskLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("ldv_completephonecalltask");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("ldv_completephonecalltask", (bool) value ? 1 : 0, 1033) },
                             { 1025, Enums.GetLabel("ldv_completephonecalltask", (bool) value ? 1 : 0, 1025) },
                        };
            }
        }

		[AttributeLogicalName("ldv_completesecondphonecalltask")]
		public bool? CompleteSecondPhoneCallTask
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_completesecondphonecalltask");
			    return value;
			}
			set
			{
                SetAttributeValue("ldv_completesecondphonecalltask", value);
			}
		}

        public IDictionary<int, string> CompleteSecondPhoneCallTaskLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("ldv_completesecondphonecalltask");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("ldv_completesecondphonecalltask", (bool) value ? 1 : 0, 1033) },
                             { 1025, Enums.GetLabel("ldv_completesecondphonecalltask", (bool) value ? 1 : 0, 1025) },
                        };
            }
        }

		[AttributeLogicalName("ldv_contactpatientrelevant")]
		public ContactPatientRelevantEnum? ContactPatientRelevant
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_contactpatientrelevant");
                return (ContactPatientRelevantEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_contactpatientrelevant", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("ldv_contactpatientrelevant", value);
			}
		}

        public IDictionary<int, string> ContactPatientRelevantLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("ldv_contactpatientrelevant");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("ldv_contactpatientrelevant", value.Value, 1033) },
                             { 1025, Enums.GetLabel("ldv_contactpatientrelevant", value.Value, 1025) },
                        };
            }
        }

		[AttributeLogicalName("ldv_currentappointment")]
		public Guid? CurrentAppointment
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_currentappointment");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_currentappointment", new EntityReference("serviceappointment", value.Value));
                else
	                SetAttributeValue("ldv_currentappointment", value);
			}
		}

        public string CurrentAppointmentName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_currentappointment");
                return value?.Name;
            }
        }

		[AttributeLogicalName("ldv_doctor")]
		public Guid? Doctor
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_doctor");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_doctor", new EntityReference("contact", value.Value));
                else
	                SetAttributeValue("ldv_doctor", value);
			}
		}

        public string DoctorName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_doctor");
                return value?.Name;
            }
        }

		[AttributeLogicalName("ldv_exportername")]
		public string ExporterName
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_exportername");
			    return value;
			}
			set
			{
                SetAttributeValue("ldv_exportername", value);
			}
		}

		[AttributeLogicalName("ldv_exportingcountry")]
		public Guid? ExportingCountry
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_exportingcountry");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_exportingcountry", new EntityReference("ldv_country", value.Value));
                else
	                SetAttributeValue("ldv_exportingcountry", value);
			}
		}

        public string ExportingCountryName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_exportingcountry");
                return value?.Name;
            }
        }

		[AttributeLogicalName("ldv_hospital")]
		public Guid? HospitalClinic
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_hospital");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_hospital", new EntityReference("account", value.Value));
                else
	                SetAttributeValue("ldv_hospital", value);
			}
		}

        public string HospitalClinicName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_hospital");
                return value?.Name;
            }
        }

		[AttributeLogicalName("ldv_icudepartment")]
		public Guid? ICUDepartment
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_icudepartment");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_icudepartment", new EntityReference("account", value.Value));
                else
	                SetAttributeValue("ldv_icudepartment", value);
			}
		}

        public string ICUDepartmentName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_icudepartment");
                return value?.Name;
            }
        }

		[AttributeLogicalName("ldv_importedproduct")]
		public Guid? ImportedProduct
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_importedproduct");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_importedproduct", new EntityReference("product", value.Value));
                else
	                SetAttributeValue("ldv_importedproduct", value);
			}
		}

        public string ImportedProductName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_importedproduct");
                return value?.Name;
            }
        }

		[AttributeLogicalName("ldv_importercompany")]
		public Guid? ImporterCompany
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_importercompany");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_importercompany", new EntityReference("account", value.Value));
                else
	                SetAttributeValue("ldv_importercompany", value);
			}
		}

        public string ImporterCompanyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_importercompany");
                return value?.Name;
            }
        }

		[AttributeLogicalName("ldv_initialappointment")]
		public InitialAppointmentEnum? InitialAppointment
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_initialappointment");
                return (InitialAppointmentEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_initialappointment", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("ldv_initialappointment", value);
			}
		}

        public IDictionary<int, string> InitialAppointmentLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("ldv_initialappointment");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("ldv_initialappointment", value.Value, 1033) },
                             { 1025, Enums.GetLabel("ldv_initialappointment", value.Value, 1025) },
                        };
            }
        }

		[AttributeLogicalName("ldv_initialapproval")]
		public InitialApprovalEnum? InitialApproval
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_initialapproval");
                return (InitialApprovalEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_initialapproval", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("ldv_initialapproval", value);
			}
		}

        public IDictionary<int, string> InitialApprovalLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("ldv_initialapproval");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("ldv_initialapproval", value.Value, 1033) },
                             { 1025, Enums.GetLabel("ldv_initialapproval", value.Value, 1025) },
                        };
            }
        }

		[AttributeLogicalName("ldv_ismedicationdelivered")]
		public bool? IsMedicationDelivered
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_ismedicationdelivered");
			    return value;
			}
			set
			{
                SetAttributeValue("ldv_ismedicationdelivered", value);
			}
		}

        public IDictionary<int, string> IsMedicationDeliveredLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("ldv_ismedicationdelivered");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("ldv_ismedicationdelivered", (bool) value ? 1 : 0, 1033) },
                             { 1025, Enums.GetLabel("ldv_ismedicationdelivered", (bool) value ? 1 : 0, 1025) },
                        };
            }
        }

		[AttributeLogicalName("ldv_lackmedicationresolution")]
		public Resolution_ldv_LackMedicationResolutionEnum? Resolution_ldv_LackMedicationResolution
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_lackmedicationresolution");
                return (Resolution_ldv_LackMedicationResolutionEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_lackmedicationresolution", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("ldv_lackmedicationresolution", value);
			}
		}

        public IDictionary<int, string> Resolution_ldv_LackMedicationResolutionLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("ldv_lackmedicationresolution");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("ldv_lackmedicationresolution", value.Value, 1033) },
                             { 1025, Enums.GetLabel("ldv_lackmedicationresolution", value.Value, 1025) },
                        };
            }
        }

		[AttributeLogicalName("ldv_lastcalldate")]
		public DateTime? LastCallDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_lastcalldate");
			    return value;
			}
			set
			{
                SetAttributeValue("ldv_lastcalldate", value);
			}
		}

		[AttributeLogicalName("ldv_madeincountry")]
		public Guid? MadeinCountry
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_madeincountry");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_madeincountry", new EntityReference("ldv_country", value.Value));
                else
	                SetAttributeValue("ldv_madeincountry", value);
			}
		}

        public string MadeinCountryName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_madeincountry");
                return value?.Name;
            }
        }

		[AttributeLogicalName("ldv_managerapproval")]
		public ManagerApprovalEnum? ManagerApproval
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_managerapproval");
                return (ManagerApprovalEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_managerapproval", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("ldv_managerapproval", value);
			}
		}

        public IDictionary<int, string> ManagerApprovalLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("ldv_managerapproval");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("ldv_managerapproval", value.Value, 1033) },
                             { 1025, Enums.GetLabel("ldv_managerapproval", value.Value, 1025) },
                        };
            }
        }

		[AttributeLogicalName("ldv_medication")]
		public Guid? Medication
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_medication");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_medication", new EntityReference("product", value.Value));
                else
	                SetAttributeValue("ldv_medication", value);
			}
		}

        public string MedicationName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_medication");
                return value?.Name;
            }
        }

		[AttributeLogicalName("ldv_medicationavailableon")]
		public DateTime? MedicationAvailableOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_medicationavailableon");
			    return value;
			}
			set
			{
                SetAttributeValue("ldv_medicationavailableon", value);
			}
		}

		[AttributeLogicalName("ldv_moacasetype")]
		public CaseType_ldv_MOACaseTypeEnum? CaseType_ldv_MOACaseType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_moacasetype");
                return (CaseType_ldv_MOACaseTypeEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_moacasetype", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("ldv_moacasetype", value);
			}
		}

        public IDictionary<int, string> CaseType_ldv_MOACaseTypeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("ldv_moacasetype");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("ldv_moacasetype", value.Value, 1033) },
                             { 1025, Enums.GetLabel("ldv_moacasetype", value.Value, 1025) },
                        };
            }
        }

		[AttributeLogicalName("ldv_newappointment")]
		public Guid? NewAppointment
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_newappointment");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_newappointment", new EntityReference("serviceappointment", value.Value));
                else
	                SetAttributeValue("ldv_newappointment", value);
			}
		}

        public string NewAppointmentName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_newappointment");
                return value?.Name;
            }
        }

		[AttributeLogicalName("ldv_newappointmentfrom")]
		public DateTime? NewAppointmentFrom
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_newappointmentfrom");
			    return value;
			}
			set
			{
                SetAttributeValue("ldv_newappointmentfrom", value);
			}
		}

		[AttributeLogicalName("ldv_newappointmentresolution")]
		public NewAppointmentResolutionEnum? NewAppointmentResolution
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_newappointmentresolution");
                return (NewAppointmentResolutionEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_newappointmentresolution", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("ldv_newappointmentresolution", value);
			}
		}

        public IDictionary<int, string> NewAppointmentResolutionLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("ldv_newappointmentresolution");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("ldv_newappointmentresolution", value.Value, 1033) },
                             { 1025, Enums.GetLabel("ldv_newappointmentresolution", value.Value, 1025) },
                        };
            }
        }

		[AttributeLogicalName("ldv_newappointmentto")]
		public DateTime? NewAppointmentTo
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_newappointmentto");
			    return value;
			}
			set
			{
                SetAttributeValue("ldv_newappointmentto", value);
			}
		}

		[AttributeLogicalName("ldv_nextdosagedate")]
		public DateTime? NextDosageDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_nextdosagedate");
			    return value;
			}
			set
			{
                SetAttributeValue("ldv_nextdosagedate", value);
			}
		}

		[AttributeLogicalName("ldv_patient")]
		public Guid? Patient
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_patient");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_patient", new EntityReference("contact", value.Value));
                else
	                SetAttributeValue("ldv_patient", value);
			}
		}

        public string PatientName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_patient");
                return value?.Name;
            }
        }

		[AttributeLogicalName("ldv_paymentstatus")]
		public PaymentStatusEnum? PaymentStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_paymentstatus");
                return (PaymentStatusEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_paymentstatus", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("ldv_paymentstatus", value);
			}
		}

        public IDictionary<int, string> PaymentStatusLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("ldv_paymentstatus");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("ldv_paymentstatus", value.Value, 1033) },
                             { 1025, Enums.GetLabel("ldv_paymentstatus", value.Value, 1025) },
                        };
            }
        }

		[AttributeLogicalName("ldv_pharmacy")]
		public Guid? Pharmacy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_pharmacy");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_pharmacy", new EntityReference("account", value.Value));
                else
	                SetAttributeValue("ldv_pharmacy", value);
			}
		}

        public string PharmacyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_pharmacy");
                return value?.Name;
            }
        }

		[AttributeLogicalName("ldv_preferreddate")]
		public DateTime? PreferredDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_preferreddate");
			    return value;
			}
			set
			{
                SetAttributeValue("ldv_preferreddate", value);
			}
		}

		[AttributeLogicalName("ldv_quantity")]
		public decimal? Quantity
		{
			get
			{
				var value = GetAttributeValue<decimal?>("ldv_quantity");
			    return value;
			}
			set
			{
                SetAttributeValue("ldv_quantity", value);
			}
		}

		[AttributeLogicalName("ldv_relative")]
		public Guid? Relative
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_relative");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_relative", new EntityReference("contact", value.Value));
                else
	                SetAttributeValue("ldv_relative", value);
			}
		}

        public string RelativeName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_relative");
                return value?.Name;
            }
        }

		[AttributeLogicalName("ldv_requeststatus")]
		public Guid? RequestStatus
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_requeststatus");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_requeststatus", new EntityReference("ldv_requeststatus", value.Value));
                else
	                SetAttributeValue("ldv_requeststatus", value);
			}
		}

        public string RequestStatusName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_requeststatus");
                return value?.Name;
            }
        }

		[AttributeLogicalName("ldv_resolution")]
		public Resolution_ldv_ResolutionEnum? Resolution_ldv_Resolution
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_resolution");
                return (Resolution_ldv_ResolutionEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_resolution", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("ldv_resolution", value);
			}
		}

        public IDictionary<int, string> Resolution_ldv_ResolutionLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("ldv_resolution");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("ldv_resolution", value.Value, 1033) },
                             { 1025, Enums.GetLabel("ldv_resolution", value.Value, 1025) },
                        };
            }
        }

		[AttributeLogicalName("ldv_sentsurvey")]
		public SentSurveyEnum? SentSurvey
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_sentsurvey");
                return (SentSurveyEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_sentsurvey", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("ldv_sentsurvey", value);
			}
		}

        public IDictionary<int, string> SentSurveyLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("ldv_sentsurvey");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("ldv_sentsurvey", value.Value, 1033) },
                             { 1025, Enums.GetLabel("ldv_sentsurvey", value.Value, 1025) },
                        };
            }
        }

		[AttributeLogicalName("ldv_timeslotsstatus")]
		public TimeSlotsStatusEnum? TimeSlotsStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_timeslotsstatus");
                return (TimeSlotsStatusEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_timeslotsstatus", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("ldv_timeslotsstatus", value);
			}
		}

        public IDictionary<int, string> TimeSlotsStatusLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("ldv_timeslotsstatus");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("ldv_timeslotsstatus", value.Value, 1033) },
                             { 1025, Enums.GetLabel("ldv_timeslotsstatus", value.Value, 1025) },
                        };
            }
        }

		[AttributeLogicalName("ldv_totalprice")]
		public decimal? TotalPrice
		{
			get
			{
				var value = GetAttributeValue<Money>("ldv_totalprice");
                return value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_totalprice", new Money(value.Value));
                else
	                SetAttributeValue("ldv_totalprice", value);
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'ldv_totalprice_Base'.<br />
        /// Value of the Total Price in base currency.
        /// </summary>
		[AttributeLogicalName("ldv_totalprice_base")]
		public decimal? TotalPriceBase
		{
			get
			{
				var value = GetAttributeValue<Money>("ldv_totalprice_base");
                return value?.Value;
			}
		}

		[AttributeLogicalName("ldv_unitprice")]
		public decimal? UnitPrice
		{
			get
			{
				var value = GetAttributeValue<Money>("ldv_unitprice");
                return value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("ldv_unitprice", new Money(value.Value));
                else
	                SetAttributeValue("ldv_unitprice", value);
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'ldv_unitprice_Base'.<br />
        /// Value of the Unit Price in base currency.
        /// </summary>
		[AttributeLogicalName("ldv_unitprice_base")]
		public decimal? UnitPriceBase
		{
			get
			{
				var value = GetAttributeValue<Money>("ldv_unitprice_base");
                return value?.Value;
			}
		}

        /// <summary>
        ///  
		/// 'MasterId'.<br />
        /// Choose the primary case the current case was merged into.
        /// </summary>
		[AttributeLogicalName("masterid")]
		public Guid? MasterCase
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("masterid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("masterid", new EntityReference("incident", value.Value));
                else
	                SetAttributeValue("masterid", value);
			}
		}

        public string MasterCaseName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("masterid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'Merged'.<br />
        /// Tells whether the incident has been merged with another incident.
        /// </summary>
		[AttributeLogicalName("merged")]
		public bool? InternalUseOnly
		{
			get
			{
				var value = GetAttributeValue<bool?>("merged");
			    return value;
			}
		}

        public IDictionary<int, string> InternalUseOnlyLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("merged");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("merged", (bool) value ? 1 : 0, 1033) },
                             { 1025, Enums.GetLabel("merged", (bool) value ? 1 : 0, 1025) },
                        };
            }
        }

        /// <summary>
        ///  
		/// 'MessageTypeCode'.<br />
        /// Shows whether the post originated as a public or private message.
        /// </summary>
		[AttributeLogicalName("messagetypecode")]
		public ReceivedAsEnum? ReceivedAs
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("messagetypecode");
                return (ReceivedAsEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("messagetypecode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("messagetypecode", value);
			}
		}

        public IDictionary<int, string> ReceivedAsLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("messagetypecode");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("messagetypecode", value.Value, 1033) },
                             { 1025, Enums.GetLabel("messagetypecode", value.Value, 1025) },
                        };
            }
        }

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Shows who last updated the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Id;
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ModifiedByExternalParty'.<br />
        /// Shows the external party who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedbyexternalparty")]
		public Guid? ModifiedByExternalParty
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedbyexternalparty");
                return value?.Id;
			}
		}

        public string ModifiedByExternalPartyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedbyexternalparty");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Shows who last updated the record on behalf of another user.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Id;
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'msa_partnercontactid'.<br />
        /// Allows a partner contact to be assigned to a specific case.
        /// </summary>
		[AttributeLogicalName("msa_partnercontactid")]
		public Guid? PartnerContact
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("msa_partnercontactid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("msa_partnercontactid", new EntityReference("contact", value.Value));
                else
	                SetAttributeValue("msa_partnercontactid", value);
			}
		}

        public string PartnerContactName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("msa_partnercontactid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'msa_partnerid'.<br />
        /// Creates a Relationship between a Partner (account) and a case for indirect service arrangements.
        /// </summary>
		[AttributeLogicalName("msa_partnerid")]
		public Guid? Partner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("msa_partnerid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("msa_partnerid", new EntityReference("account", value.Value));
                else
	                SetAttributeValue("msa_partnerid", value);
			}
		}

        public string PartnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("msa_partnerid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'msdyn_FunctionalLocation'.<br />
        /// Case's functional location
        /// </summary>
		[AttributeLogicalName("msdyn_functionallocation")]
		public Guid? FunctionalLocation
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("msdyn_functionallocation");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("msdyn_functionallocation", new EntityReference("msdyn_functionallocation", value.Value));
                else
	                SetAttributeValue("msdyn_functionallocation", value);
			}
		}

        public string FunctionalLocationName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("msdyn_functionallocation");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'msdyn_IncidentType'.<br />
        /// Unique identifier for Incident Type associated with Case.
        /// </summary>
		[AttributeLogicalName("msdyn_incidenttype")]
		public Guid? IncidentType
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("msdyn_incidenttype");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("msdyn_incidenttype", new EntityReference("msdyn_incidenttype", value.Value));
                else
	                SetAttributeValue("msdyn_incidenttype", value);
			}
		}

        public string IncidentTypeName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("msdyn_incidenttype");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'msdyn_iotalert'.<br />
        /// The iot alert that initiated this case
        /// </summary>
		[AttributeLogicalName("msdyn_iotalert")]
		public Guid? IoTAlert
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("msdyn_iotalert");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("msdyn_iotalert", new EntityReference("msdyn_iotalert", value.Value));
                else
	                SetAttributeValue("msdyn_iotalert", value);
			}
		}

        public string IoTAlertName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("msdyn_iotalert");
                return value?.Name;
            }
        }

		[AttributeLogicalName("new_casetype")]
		public CaseType_new_CaseTypeEnum? CaseType_new_CaseType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("new_casetype");
                return (CaseType_new_CaseTypeEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("new_casetype", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("new_casetype", value);
			}
		}

        public IDictionary<int, string> CaseType_new_CaseTypeLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("new_casetype");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("new_casetype", value.Value, 1033) },
                             { 1025, Enums.GetLabel("new_casetype", value.Value, 1025) },
                        };
            }
        }

		[AttributeLogicalName("new_customerarea")]
		public CustomerAreaEnum? CustomerArea
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("new_customerarea");
                return (CustomerAreaEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("new_customerarea", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("new_customerarea", value);
			}
		}

        public IDictionary<int, string> CustomerAreaLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("new_customerarea");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("new_customerarea", value.Value, 1033) },
                             { 1025, Enums.GetLabel("new_customerarea", value.Value, 1025) },
                        };
            }
        }

		[AttributeLogicalName("new_reviewed")]
		public bool? tmtalmragat
		{
			get
			{
				var value = GetAttributeValue<bool?>("new_reviewed");
			    return value;
			}
			set
			{
                SetAttributeValue("new_reviewed", value);
			}
		}

        public IDictionary<int, string> tmtalmragatLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("new_reviewed");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("new_reviewed", (bool) value ? 1 : 0, 1033) },
                             { 1025, Enums.GetLabel("new_reviewed", (bool) value ? 1 : 0, 1025) },
                        };
            }
        }

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'NumberOfChildIncidents'.<br />
        /// Number of child incidents associated with the incident.
        /// </summary>
		[AttributeLogicalName("numberofchildincidents")]
		public int? ChildCases
		{
			get
			{
				var value = GetAttributeValue<int?>("numberofchildincidents");
			    return value;
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'OnHoldTime'.<br />
        /// Shows the duration in minutes for which the case was on hold.
        /// </summary>
		[AttributeLogicalName("onholdtime")]
		public int? OnHoldTimeMinutes
		{
			get
			{
				var value = GetAttributeValue<int?>("onholdtime");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
			    return value;
			}
			set
			{
                SetAttributeValue("overriddencreatedon", value);
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
			    return value;
			}
			set
			{
                SetAttributeValue("ownerid", value);
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
                return value?.Id;
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
                return value?.Id;
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
                return value?.Id;
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ParentCaseId'.<br />
        /// Choose the parent case for a case.
        /// </summary>
		[AttributeLogicalName("parentcaseid")]
		public Guid? ParentCase
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("parentcaseid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("parentcaseid", new EntityReference("incident", value.Value));
                else
	                SetAttributeValue("parentcaseid", value);
			}
		}

        public string ParentCaseName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("parentcaseid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'PrimaryContactId'.<br />
        /// Select a primary contact for this case.
        /// </summary>
		[AttributeLogicalName("primarycontactid")]
		public Guid? Contact_PrimaryContactId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("primarycontactid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("primarycontactid", new EntityReference("contact", value.Value));
                else
	                SetAttributeValue("primarycontactid", value);
			}
		}

        public string Contact_PrimaryContactIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("primarycontactid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'PriorityCode'.<br />
        /// Select the priority so that preferred customers or critical issues are handled quickly.
        /// </summary>
		[AttributeLogicalName("prioritycode")]
		public PriorityEnum? Priority
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("prioritycode");
                return (PriorityEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("prioritycode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("prioritycode", value);
			}
		}

        public IDictionary<int, string> PriorityLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("prioritycode");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("prioritycode", value.Value, 1033) },
                             { 1025, Enums.GetLabel("prioritycode", value.Value, 1025) },
                        };
            }
        }

        /// <summary>
        ///  
		/// 'ProcessId'.<br />
        /// Contains the id of the process associated with the entity.
        /// </summary>
		[AttributeLogicalName("processid")]
		public Guid? ProcessId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("processid");
			    return value;
			}
			set
			{
                SetAttributeValue("processid", value);
			}
		}

        /// <summary>
        ///  
		/// 'ProductId'.<br />
        /// Choose the product associated with the case to identify warranty, service, or other product issues and be able to report the number of incidents for each product.
        /// </summary>
		[AttributeLogicalName("productid")]
		public Guid? Product
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("productid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("productid", new EntityReference("product", value.Value));
                else
	                SetAttributeValue("productid", value);
			}
		}

        public string ProductName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("productid");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=100] 
		/// 'ProductSerialNumber'.<br />
        /// Type the serial number of the product that is associated with this case, so that the number of cases per product can be reported.
        /// </summary>
		[AttributeLogicalName("productserialnumber")]
		public string SerialNumber
		{
			get
			{
				var value = GetAttributeValue<string>("productserialnumber");
			    return value;
			}
			set
			{
                SetAttributeValue("productserialnumber", value);
			}
		}

        /// <summary>
        ///  
		/// 'ResolveBy'.<br />
        /// Enter the date by when the case must be resolved.
        /// </summary>
		[AttributeLogicalName("resolveby")]
		public DateTime? ResolveBy
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("resolveby");
			    return value;
			}
			set
			{
                SetAttributeValue("resolveby", value);
			}
		}

        /// <summary>
        ///  
		/// 'ResolveByKPIId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("resolvebykpiid")]
		public Guid? ResolveByKPI
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("resolvebykpiid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("resolvebykpiid", new EntityReference("slakpiinstance", value.Value));
                else
	                SetAttributeValue("resolvebykpiid", value);
			}
		}

        public string ResolveByKPIName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("resolvebykpiid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ResolveBySLAStatus'.<br />
        /// Shows the status of the resolution time for the case according to the terms of the SLA.
        /// </summary>
		[AttributeLogicalName("resolvebyslastatus")]
		public ResolveBySLAStatusEnum? ResolveBySLAStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("resolvebyslastatus");
                return (ResolveBySLAStatusEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("resolvebyslastatus", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("resolvebyslastatus", value);
			}
		}

        public IDictionary<int, string> ResolveBySLAStatusLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("resolvebyslastatus");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("resolvebyslastatus", value.Value, 1033) },
                             { 1025, Enums.GetLabel("resolvebyslastatus", value.Value, 1025) },
                        };
            }
        }

        /// <summary>
        ///  
		/// 'ResponseBy'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("responseby")]
		public DateTime? FirstResponseBy
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("responseby");
			    return value;
			}
			set
			{
                SetAttributeValue("responseby", value);
			}
		}

        /// <summary>
        ///  
		/// 'ResponsibleContactId'.<br />
        /// Choose an additional customer contact who can also help resolve the case.
        /// </summary>
		[AttributeLogicalName("responsiblecontactid")]
		[Obsolete]
		public Guid? ResponsibleContact
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("responsiblecontactid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("responsiblecontactid", new EntityReference("contact", value.Value));
                else
	                SetAttributeValue("responsiblecontactid", value);
			}
		}

        public string ResponsibleContactName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("responsiblecontactid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'RouteCase'.<br />
        /// Tells whether the incident has been routed to queue or not.
        /// </summary>
		[AttributeLogicalName("routecase")]
		public bool? RouteCase
		{
			get
			{
				var value = GetAttributeValue<bool?>("routecase");
			    return value;
			}
			set
			{
                SetAttributeValue("routecase", value);
			}
		}

        public IDictionary<int, string> RouteCaseLabels
        {
		    get
		    {
                var value = GetAttributeValue<bool?>("routecase");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("routecase", (bool) value ? 1 : 0, 1033) },
                             { 1025, Enums.GetLabel("routecase", (bool) value ? 1 : 0, 1025) },
                        };
            }
        }

        /// <summary>
        /// [Range(-100000000000, 100000000000)] 
		/// 'SentimentValue'.<br />
        /// Value derived after assessing words commonly associated with a negative, neutral, or positive sentiment that occurs in a social post. Sentiment information can also be reported as numeric values.
        /// </summary>
		[AttributeLogicalName("sentimentvalue")]
		public double? SentimentValue
		{
			get
			{
				var value = GetAttributeValue<double?>("sentimentvalue");
			    return value;
			}
			set
			{
                SetAttributeValue("sentimentvalue", value);
			}
		}

        /// <summary>
        ///  
		/// 'ServiceStage'.<br />
        /// Select the stage, in the case resolution process, that the case is in.
        /// </summary>
		[AttributeLogicalName("servicestage")]
		public ServiceStageEnum? ServiceStage
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("servicestage");
                return (ServiceStageEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("servicestage", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("servicestage", value);
			}
		}

        public IDictionary<int, string> ServiceStageLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("servicestage");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("servicestage", value.Value, 1033) },
                             { 1025, Enums.GetLabel("servicestage", value.Value, 1025) },
                        };
            }
        }

        /// <summary>
        ///  
		/// 'SeverityCode'.<br />
        /// Select the severity of this case to indicate the incident's impact on the customer's business.
        /// </summary>
		[AttributeLogicalName("severitycode")]
		public SeverityEnum? Severity
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("severitycode");
                return (SeverityEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("severitycode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("severitycode", value);
			}
		}

        public IDictionary<int, string> SeverityLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("severitycode");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("severitycode", value.Value, 1033) },
                             { 1025, Enums.GetLabel("severitycode", value.Value, 1025) },
                        };
            }
        }

        /// <summary>
        ///  
		/// 'SLAId'.<br />
        /// Choose the service level agreement (SLA) that you want to apply to the case record.
        /// </summary>
		[AttributeLogicalName("slaid")]
		public Guid? SLA
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("slaid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("slaid", new EntityReference("sla", value.Value));
                else
	                SetAttributeValue("slaid", value);
			}
		}

        public string SLAName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("slaid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'SLAInvokedId'.<br />
        /// Last SLA that was applied to this case. This field is for internal use only.
        /// </summary>
		[AttributeLogicalName("slainvokedid")]
		public Guid? LastSLAapplied
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("slainvokedid");
                return value?.Id;
			}
		}

        public string LastSLAappliedName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("slainvokedid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'SocialProfileId'.<br />
        /// Unique identifier of the social profile with which the case is associated.
        /// </summary>
		[AttributeLogicalName("socialprofileid")]
		public Guid? SocialProfile
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("socialprofileid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("socialprofileid", new EntityReference("socialprofile", value.Value));
                else
	                SetAttributeValue("socialprofileid", value);
			}
		}

        public string SocialProfileName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("socialprofileid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'StageId'.<br />
        /// Contains the id of the stage where the entity is located.
        /// </summary>
		[AttributeLogicalName("stageid")]
		public Guid? __DeprecatedStageId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("stageid");
			    return value;
			}
			set
			{
                SetAttributeValue("stageid", value);
			}
		}

        /// <summary>
        ///  
		/// 'StateCode'.<br />
        /// Shows whether the case is active, resolved, or canceled. Resolved and canceled cases are read-only and can't be edited unless they are reactivated.
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
                return (StatusEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("statecode", value);
			}
		}

        public IDictionary<int, string> StatusLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("statecode");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("statecode", value.Value, 1033) },
                             { 1025, Enums.GetLabel("statecode", value.Value, 1025) },
                        };
            }
        }

        /// <summary>
        ///  
		/// 'StatusCode'.<br />
        /// Select the case's status.
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
                return (StatusReasonEnum?) value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("statuscode", value);
			}
		}

        public IDictionary<int, string> StatusReasonLabels
        {
		    get
		    {
                var value = GetAttributeValue<OptionSetValue>("statuscode");
                if (value == null) return null;
                return new Dictionary<int, string>
                        {
                             { 1033, Enums.GetLabel("statuscode", value.Value, 1033) },
                             { 1025, Enums.GetLabel("statuscode", value.Value, 1025) },
                        };
            }
        }

        /// <summary>
        ///  
		/// 'SubjectId'.<br />
        /// Choose the subject for the case, such as catalog request or product complaint, so customer service managers can identify frequent requests or problem areas. Administrators can configure subjects under Business Management in the Settings area.
        /// </summary>
		[AttributeLogicalName("subjectid")]
		public Guid? Subject
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("subjectid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("subjectid", new EntityReference("subject", value.Value));
                else
	                SetAttributeValue("subjectid", value);
			}
		}

        public string SubjectName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("subjectid");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=100] 
		/// 'TicketNumber'.<br />
        /// Shows the case number for customer reference and searching capabilities. This cannot be modified.
        /// </summary>
		[AttributeLogicalName("ticketnumber")]
		public string CaseNumber
		{
			get
			{
				var value = GetAttributeValue<string>("ticketnumber");
			    return value;
			}
			set
			{
                SetAttributeValue("ticketnumber", value);
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber")]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
			    return value;
			}
			set
			{
                SetAttributeValue("timezoneruleversionnumber", value);
			}
		}

        /// <summary>
        /// [Required][MaxLength=200] 
		/// 'Title'.<br />
        /// Type a subject or descriptive name, such as the request, issue, or company name, to identify the case in Microsoft Dynamics 365 views.
        /// </summary>
		[AttributeLogicalName("title")]
		public string CaseTitle
		{
			get
			{
				var value = GetAttributeValue<string>("title");
			    return value;
			}
			set
			{
                SetAttributeValue("title", value);
			}
		}

        /// <summary>
        ///  
		/// 'TransactionCurrencyId'.<br />
        /// Choose the local currency for the record to make sure budgets are reported in the correct currency.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid")]
		public Guid? Currency
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
	                SetAttributeValue("transactioncurrencyid", value);
			}
		}

        public string CurrencyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=1250] 
		/// 'TraversedPath'.<br />
        /// A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.
        /// </summary>
		[AttributeLogicalName("traversedpath")]
		public string __DeprecatedTraversedPath
		{
			get
			{
				var value = GetAttributeValue<string>("traversedpath");
			    return value;
			}
			set
			{
                SetAttributeValue("traversedpath", value);
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode")]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
			    return value;
			}
			set
			{
                SetAttributeValue("utcconversiontimezonecode", value);
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
			    return value;
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'incident_existingcase'
		/// </summary>
		[RelationshipSchemaName("incident_existingcase", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public Case[] CasesOfExistingCase
		{
			get => GetRelatedEntities<Case>("incident_existingcase", Microsoft.Xrm.Sdk.EntityRole.Referenced)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("incident_existingcase", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'incident_master_incident'
		/// </summary>
		[RelationshipSchemaName("incident_master_incident", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public Case[] CasesOfMasterCase
		{
			get => GetRelatedEntities<Case>("incident_master_incident", Microsoft.Xrm.Sdk.EntityRole.Referenced)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("incident_master_incident", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'incident_parent_incident'
		/// </summary>
		[RelationshipSchemaName("incident_parent_incident", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public Case[] CasesOfParentCase
		{
			get => GetRelatedEntities<Case>("incident_parent_incident", Microsoft.Xrm.Sdk.EntityRole.Referenced)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("incident_parent_incident", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_incident_incident_ChildCase'
		/// </summary>
		[RelationshipSchemaName("ldv_incident_incident_ChildCase", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public Case[] CasesOfChildCase
		{
			get => GetRelatedEntities<Case>("ldv_incident_incident_ChildCase", Microsoft.Xrm.Sdk.EntityRole.Referenced)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("ldv_incident_incident_ChildCase", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			}
		}
		
		/// <summary>
		/// N:1, 'incident_existingcase'
		/// </summary>
		[RelationshipSchemaName("incident_existingcase", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("existingcase")]
		public Case CaseAsExistingCase
		{
			get => GetRelatedEntity<Case>("incident_existingcase", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Case>("incident_existingcase", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
			}
		}
		
		/// <summary>
		/// N:1, 'incident_master_incident'
		/// </summary>
		[RelationshipSchemaName("incident_master_incident", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("masterid")]
		public Case CaseAsMasterCase
		{
			get => GetRelatedEntity<Case>("incident_master_incident", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Case>("incident_master_incident", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
			}
		}
		
		/// <summary>
		/// N:1, 'incident_parent_incident'
		/// </summary>
		[RelationshipSchemaName("incident_parent_incident", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("parentcaseid")]
		public Case CaseAsParentCase
		{
			get => GetRelatedEntity<Case>("incident_parent_incident", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Case>("incident_parent_incident", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_incident_incident_ChildCase'
		/// </summary>
		[RelationshipSchemaName("ldv_incident_incident_ChildCase", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("ldv_childcase")]
		public Case CaseAsChildCase
		{
			get => GetRelatedEntity<Case>("ldv_incident_incident_ChildCase", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Case>("ldv_incident_incident_ChildCase", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
			}
		}
		
		public static class RelationNames {
			public static RelationName CasesOfExistingCase = new RelationName("CasesOfExistingCase");
			public static RelationName CasesOfMasterCase = new RelationName("CasesOfMasterCase");
			public static RelationName CasesOfParentCase = new RelationName("CasesOfParentCase");
			public static RelationName CasesOfChildCase = new RelationName("CasesOfChildCase");
			public static RelationName CaseAsExistingCase = new RelationName("CaseAsExistingCase");
			public static RelationName CaseAsMasterCase = new RelationName("CaseAsMasterCase");
			public static RelationName CaseAsParentCase = new RelationName("CaseAsParentCase");
			public static RelationName CaseAsChildCase = new RelationName("CaseAsChildCase");
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["CasesOfExistingCase"] = new object[] { "CasesOfExistingCase", "incident", "incident", "existingcase", "incidentid", "incidentid", "incidentid", "incident_existingcase", typeof (Case[]) };
			relationProperties["CasesOfMasterCase"] = new object[] { "CasesOfMasterCase", "incident", "incident", "masterid", "incidentid", "incidentid", "incidentid", "incident_master_incident", typeof (Case[]) };
			relationProperties["CasesOfParentCase"] = new object[] { "CasesOfParentCase", "incident", "incident", "parentcaseid", "incidentid", "incidentid", "incidentid", "incident_parent_incident", typeof (Case[]) };
			relationProperties["CasesOfChildCase"] = new object[] { "CasesOfChildCase", "incident", "incident", "ldv_childcase", "incidentid", "incidentid", "incidentid", "ldv_incident_incident_ChildCase", typeof (Case[]) };
			relationProperties["CaseAsExistingCase"] = new object[] { "CaseAsExistingCase", "incident", "incident", "incidentid", "existingcase", "incidentid", "incidentid", "incident_existingcase", typeof (Case) };
			relationProperties["CaseAsMasterCase"] = new object[] { "CaseAsMasterCase", "incident", "incident", "incidentid", "masterid", "incidentid", "incidentid", "incident_master_incident", typeof (Case) };
			relationProperties["CaseAsParentCase"] = new object[] { "CaseAsParentCase", "incident", "incident", "incidentid", "parentcaseid", "incidentid", "incidentid", "incident_parent_incident", typeof (Case) };
			relationProperties["CaseAsChildCase"] = new object[] { "CaseAsChildCase", "incident", "incident", "incidentid", "ldv_childcase", "incidentid", "incidentid", "ldv_incident_incident_ChildCase", typeof (Case) };
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public Case(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                    Attributes["incidentid"] = base.Id;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		public enum ActivitiesCompleteEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum BlockedProfileEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum OriginEnum
		{
			Phone = 1,
			Email = 2,
			Web = 3,
			Facebook = 2483,
			Twitter = 3986,
			IoT = 700610000,
			Chat = 6,
		}
	
		public enum CaseType_CaseTypeCodeEnum
		{
			Question = 1,
			Problem = 2,
			Request = 3,
		}
	
		public enum CheckEmailEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum ServiceLevelEnum
		{
			Gold = 1,
			Silver = 2,
			Bronze = 3,
		}
	
		public enum CustomerContactedEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum SatisfactionEnum
		{
			VerySatisfied = 5,
			Satisfied = 4,
			Neutral = 3,
			Dissatisfied = 2,
			VeryDissatisfied = 1,
		}
	
		public enum DecrementEntitlementTermsEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum FirstResponseSentEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum FirstResponseSLAStatusEnum
		{
			InProgress = 1,
			NearingNoncompliance = 2,
			Succeeded = 3,
			Noncompliant = 4,
		}
	
		public enum FollowupTaskCreatedEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum CaseStageEnum
		{
			DefaultValue = 1,
		}
	
		public enum DecrementingEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum IsEscalatedEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum CaseType_ldv_CaseTypeEnum
		{
			LackofMedicationRequest = 1,
			CheckICUpatientstatus = 2,
			Changeappointmentrequest = 3,
		}
	
		public enum ChangeAppointmentTypeEnum
		{
			Clinic = 1,
			Hospital = 2,
		}
	
		public enum CheckStockEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum CompleteCheckAvailableAppointmentsTaskEnum
		{
			Completed = 1,
			NotCompleted = 2,
		}
	
		public enum CompletePhoneCallTaskEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum CompleteSecondPhoneCallTaskEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum ContactPatientRelevantEnum
		{
			StatusConfirmed = 1,
			NotReachable = 2,
		}
	
		public enum InitialAppointmentEnum
		{
			Auto = 1,
			BasedOnTheChoicesAbove = 2,
		}
	
		public enum InitialApprovalEnum
		{
			Approved = 1,
			Reject = 3,
		}
	
		public enum IsMedicationDeliveredEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum Resolution_ldv_LackMedicationResolutionEnum
		{
			AvailableOnDate = 1,
			AvailableatOtherPharmacy = 2,
			GeneralLack = 3,
		}
	
		public enum ManagerApprovalEnum
		{
			Approve = 1,
			Reject = 3,
		}
	
		public enum CaseType_ldv_MOACaseTypeEnum
		{
			ImportingPermissionRequest = 1,
		}
	
		public enum NewAppointmentResolutionEnum
		{
			Theproposedappointment = 1,
			Therearenoappointments = 2,
		}
	
		public enum PaymentStatusEnum
		{
			PaymentDone = 1,
			ExceededPaymentTime = 2,
		}
	
		public enum Resolution_ldv_ResolutionEnum
		{
			Resolved = 1,
			NotResolved = 2,
		}
	
		public enum SentSurveyEnum
		{
			Sent = 1,
			NotSent = 2,
		}
	
		public enum TimeSlotsStatusEnum
		{
			Available = 1,
			NotAvailable = 2,
		}
	
		public enum InternalUseOnlyEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum ReceivedAsEnum
		{
			PublicMessage = 0,
			PrivateMessage = 1,
		}
	
		public enum CaseType_new_CaseTypeEnum
		{
			Complaint = 1,
			Suggestion = 753240001,
			Inquiry = 4,
			Request = 2,
		}
	
		public enum CustomerAreaEnum
		{
			Cairo = 100000000,
			Giza = 100000001,
			Alexandria = 100000002,
			Sohag = 100000003,
			Beheira = 100000004,
			Asuit = 100000005,
			Menya = 100000006,
		}
	
		public enum tmtalmragatEnum
		{
			nam = 1,
			la = 0,
		}
	
		public enum PriorityEnum
		{
			High = 1,
			Normal = 2,
			Low = 3,
		}
	
		public enum ResolveBySLAStatusEnum
		{
			InProgress = 1,
			NearingNoncompliance = 2,
			Succeeded = 3,
			Noncompliant = 4,
		}
	
		public enum RouteCaseEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum ServiceStageEnum
		{
			Identify = 0,
			Research = 1,
			Resolve = 2,
		}
	
		public enum SeverityEnum
		{
			DefaultValue = 1,
		}
	
		public enum StatusEnum
		{
			Active = 0,
			Resolved = 1,
			Cancelled = 2,
		}
	
		public enum StatusReasonEnum
		{
			InProgress = 1,
			OnHold = 2,
			WaitingforDetails = 3,
			Researching = 4,
			Payment = 753240000,
			ProblemSolved = 5,
			InformationProvided = 1000,
			RequestCompleted = 753240001,
			Cancelled = 6,
			Merged = 2000,
			RequestRejected = 753240002,
		}
	
		#endregion

		#region Metadata

		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string ActivitiesComplete = "activitiescomplete";
				public const string BlockedProfile = "blockedprofile";
				public const string Origin = "caseorigincode";
				public const string CaseType_CaseTypeCode = "casetypecode";
				public const string CheckEmail = "checkemail";
				public const string ServiceLevel = "contractservicelevelcode";
				public const string CustomerContacted = "customercontacted";
				public const string Satisfaction = "customersatisfactioncode";
				public const string DecrementEntitlementTerms = "decremententitlementterm";
				public const string FirstResponseSent = "firstresponsesent";
				public const string FirstResponseSLAStatus = "firstresponseslastatus";
				public const string FollowupTaskCreated = "followuptaskcreated";
				public const string CaseStage = "incidentstagecode";
				public const string Decrementing = "isdecrementing";
				public const string IsEscalated = "isescalated";
				public const string CaseType_ldv_CaseType = "ldv_casetype";
				public const string ChangeAppointmentType = "ldv_changeappointmenttype";
				public const string CheckStock = "ldv_checkstock";
				public const string CompleteCheckAvailableAppointmentsTask = "ldv_completecheckavailableappointmentstask";
				public const string CompletePhoneCallTask = "ldv_completephonecalltask";
				public const string CompleteSecondPhoneCallTask = "ldv_completesecondphonecalltask";
				public const string ContactPatientRelevant = "ldv_contactpatientrelevant";
				public const string InitialAppointment = "ldv_initialappointment";
				public const string InitialApproval = "ldv_initialapproval";
				public const string IsMedicationDelivered = "ldv_ismedicationdelivered";
				public const string Resolution_ldv_LackMedicationResolution = "ldv_lackmedicationresolution";
				public const string ManagerApproval = "ldv_managerapproval";
				public const string CaseType_ldv_MOACaseType = "ldv_moacasetype";
				public const string NewAppointmentResolution = "ldv_newappointmentresolution";
				public const string PaymentStatus = "ldv_paymentstatus";
				public const string Resolution_ldv_Resolution = "ldv_resolution";
				public const string SentSurvey = "ldv_sentsurvey";
				public const string TimeSlotsStatus = "ldv_timeslotsstatus";
				public const string InternalUseOnly = "merged";
				public const string ReceivedAs = "messagetypecode";
				public const string CaseType_new_CaseType = "new_casetype";
				public const string CustomerArea = "new_customerarea";
				public const string tmtalmragat = "new_reviewed";
				public const string Priority = "prioritycode";
				public const string ResolveBySLAStatus = "resolvebyslastatus";
				public const string RouteCase = "routecase";
				public const string ServiceStage = "servicestage";
				public const string Severity = "severitycode";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static IDictionary<int, IDictionary<int, string>> ActivitiesComplete { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Yes"},
								{0, "No"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "نعم"},
								{0, "لا"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> BlockedProfile { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Yes"},
								{0, "No"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "نعم"},
								{0, "لا"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> Origin { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Phone"},
								{2, "Email"},
								{3, "Web"},
								{2483, "Facebook"},
								{3986, "Twitter"},
								{700610000, "IoT"},
								{6, "Chat"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "هاتف"},
								{2, "بريد إلكتروني"},
								{3, "ويب"},
								{2483, "موقع Facebook"},
								{3986, "موقع Twitter"},
								{700610000, "IoT"},
								{6, null},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> CaseType_CaseTypeCode { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Question"},
								{2, "Problem"},
								{3, "Request"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "السؤال"},
								{2, "المشكلة"},
								{3, "طلب"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> CheckEmail { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Yes"},
								{0, "No"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "نعم"},
								{0, "لا"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> ServiceLevel { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Gold"},
								{2, "Silver"},
								{3, "Bronze"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "ذهبي"},
								{2, "فضة"},
								{3, "مستوى خدمات \"برونز\""},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> CustomerContacted { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Yes"},
								{0, "No"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "نعم"},
								{0, "لا"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> Satisfaction { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{5, "Very Satisfied"},
								{4, "Satisfied"},
								{3, "Neutral"},
								{2, "Dissatisfied"},
								{1, "Very Dissatisfied"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{5, "راض جداً"},
								{4, "راضٍ"},
								{3, "محايد"},
								{2, "غير راضٍ"},
								{1, "غير راضٍ جدًا"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> DecrementEntitlementTerms { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Yes"},
								{0, "No"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "نعم"},
								{0, "لا"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> FirstResponseSent { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Yes"},
								{0, "No"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "نعم"},
								{0, "لا"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> FirstResponseSLAStatus { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "In Progress"},
								{2, "Nearing Noncompliance"},
								{3, "Succeeded"},
								{4, "Noncompliant"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "قيد التقدم"},
								{2, "عدم التوافق الوشيك"},
								{3, "تم بنجاح"},
								{4, "غير متوافق"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> FollowupTaskCreated { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Yes"},
								{0, "No"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "نعم"},
								{0, "لا"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> CaseStage { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Default Value"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "القيمة الافتراضية"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> Decrementing { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Yes"},
								{0, "No"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "نعم"},
								{0, "لا"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> IsEscalated { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Yes"},
								{0, "No"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "نعم"},
								{0, "لا"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> CaseType_ldv_CaseType { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Lack of Medication Request"},
								{2, "Check ICU patient status"},
								{3, "Change appointment request"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "طلب نقص دواء"},
								{2, "طلب التحقق من حالة مريض بالعناية المركزة"},
								{3, "طلب تغيير موعد"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> ChangeAppointmentType { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Clinic"},
								{2, "Hospital"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "العيادة"},
								{2, "المستشفى"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> CheckStock { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Yes"},
								{0, "No"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "نعم"},
								{0, "لا"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> CompleteCheckAvailableAppointmentsTask { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Completed"},
								{2, "Not Completed"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "تم"},
								{2, "لم يتم"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> CompletePhoneCallTask { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Yes"},
								{0, "No"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "نعم"},
								{0, "لا"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> CompleteSecondPhoneCallTask { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Yes"},
								{0, "No"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "نعم"},
								{0, "لا"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> ContactPatientRelevant { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Status Confirmed"},
								{2, "Not Reachable"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "تم تأكيد الحالة"},
								{2, "لم يتم التواصل"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> InitialAppointment { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Auto"},
								{2, "Based On The Choices Above"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "مميكن"},
								{2, "بناءا على الإختيارات"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> InitialApproval { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Approved"},
								{3, "Reject"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "الموافقة"},
								{3, "الرفض"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> IsMedicationDelivered { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Yes"},
								{0, "No"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "نعم"},
								{0, "لا"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> Resolution_ldv_LackMedicationResolution { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Available On Date"},
								{2, "Available  at Other Pharmacy"},
								{3, "General Lack"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "متوفر: في موعد"},
								{2, "متوفر بصيدلية أخرى"},
								{3, "نقص عام"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> ManagerApproval { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Approve"},
								{3, "Reject"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "الموافقة"},
								{3, "الرفض"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> CaseType_ldv_MOACaseType { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Importing Permission Request"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "طلب إذن أستيراد"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> NewAppointmentResolution { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "The proposed appointment"},
								{2, "There are no appointments"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "الموعد المقترح"},
								{2, "لا توجد مواعيد "},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> PaymentStatus { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Payment Done"},
								{2, "Exceeded Payment Time"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "تم الدفع"},
								{2, "تجاوز مدة الدفع"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> Resolution_ldv_Resolution { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Resolved"},
								{2, "Not Resolved"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "تم الحل"},
								{2, "لم يتم الحل"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> SentSurvey { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Sent"},
								{2, "Not Sent"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "تم الإرسال"},
								{2, "لم يتم الإرسال"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> TimeSlotsStatus { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Available"},
								{2, "Not Available"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "متوفر"},
								{2, "غير متوفر"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> InternalUseOnly { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Yes"},
								{0, "No"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "نعم"},
								{0, "لا"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> ReceivedAs { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{0, "Public Message"},
								{1, "Private Message"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{0, "رسالة عامة"},
								{1, "رسالة خاصة"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> CaseType_new_CaseType { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Complaint"},
								{753240001, "Suggestion"},
								{4, "Inquiry"},
								{2, "Request"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "شكوى"},
								{753240001, "إقتراح"},
								{4, "تساؤل"},
								{2, "طلب"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> CustomerArea { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{100000000, "Cairo"},
								{100000001, "Giza"},
								{100000002, "Alexandria"},
								{100000003, "Sohag"},
								{100000004, "Beheira"},
								{100000005, "Asuit"},
								{100000006, "Menya"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{100000000, "القاهرة"},
								{100000001, "الجيزة"},
								{100000002, "الأسكندرية"},
								{100000003, "سوهاج"},
								{100000004, "البحيرة"},
								{100000005, "أسيوط"},
								{100000006, "المنيا"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> tmtalmragat { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "نعم"},
								{0, "لا"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, ""},
								{0, ""},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> Priority { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "High"},
								{2, "Normal"},
								{3, "Low"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "مرتفع"},
								{2, "‏‏عادي"},
								{3, "منخفض"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> ResolveBySLAStatus { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "In Progress"},
								{2, "Nearing Noncompliance"},
								{3, "Succeeded"},
								{4, "Noncompliant"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "قيد التقدم"},
								{2, "عدم التوافق الوشيك"},
								{3, "تم بنجاح"},
								{4, "غير متوافق"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> RouteCase { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Yes"},
								{0, "No"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "نعم"},
								{0, "لا"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> ServiceStage { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{0, "Identify"},
								{1, "Research"},
								{2, "Resolve"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{0, "تحديد"},
								{1, "بحث"},
								{2, "حل"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> Severity { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "Default Value"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "القيمة الافتراضية"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> Status { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{0, "Active"},
								{1, "Resolved"},
								{2, "Cancelled"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{0, "نشطة"},
								{1, "تم الحل"},
								{2, "ملغىً"},
							}
						},
					};

				public static IDictionary<int, IDictionary<int, string>> StatusReason { get; set; } =
					new Dictionary<int, IDictionary<int, string>>
					{
						{ 1033,
							new Dictionary<int, string>
							{
								{1, "In Progress"},
								{2, "On Hold"},
								{3, "Waiting for Details"},
								{4, "Researching"},
								{753240000, "Payment"},
								{5, "Problem Solved"},
								{1000, "Information Provided"},
								{753240001, "Request Completed"},
								{6, "Cancelled"},
								{2000, "Merged"},
								{753240002, "Request Rejected"},
							}
						},
						{ 1025,
							new Dictionary<int, string>
							{
								{1, "قيد التقدم"},
								{2, "معلّق"},
								{3, "في انتظار التفاصيل"},
								{4, "قيد البحث"},
								{753240000, "الدفع"},
								{5, "تم حل المشكلة"},
								{1000, "المعلومات المتوفرة"},
								{753240001, "أكتمال الطلب"},
								{6, "ملغى"},
								{2000, "تم دمجه"},
								{753240002, "رفض الطلب"},
							}
						},
					};

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string Account = "accountid";
			public const string ActivitiesComplete = "activitiescomplete";
			public const string ActualServiceUnits = "actualserviceunits";
			public const string CreatedByIPAddress = "adx_createdbyipaddress";
			public const string CreatedByUsername = "adx_createdbyusername";
			public const string ModifiedByIPAddress = "adx_modifiedbyipaddress";
			public const string ModifiedByUsername = "adx_modifiedbyusername";
			public const string BilledServiceUnits = "billedserviceunits";
			public const string BlockedProfile = "blockedprofile";
			public const string Origin = "caseorigincode";
			public const string CaseType_CaseTypeCode = "casetypecode";
			public const string CheckEmail = "checkemail";
			public const string Contact_ContactId = "contactid";
			public const string ContractLine = "contractdetailid";
			public const string Contract = "contractid";
			public const string ServiceLevel = "contractservicelevelcode";
			public const string CreatedBy = "createdby";
			public const string CreatedByExternalParty = "createdbyexternalparty";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string CustomerContacted = "customercontacted";
			public const string Customer = "customerid";
			public const string Satisfaction = "customersatisfactioncode";
			public const string DecrementEntitlementTerms = "decremententitlementterm";
			public const string Description = "description";
			public const string EmailAddress = "emailaddress";
			public const string Entitlement = "entitlementid";
			public const string EntityImage = "entityimage";
			public const string EntityImage_Timestamp = "entityimage_timestamp";
			public const string EntityImage_URL = "entityimage_url";
			public const string EntityImageId = "entityimageid";
			public const string EscalatedOn = "escalatedon";
			public const string ExchangeRate = "exchangerate";
			public const string ExistingCase = "existingcase";
			public const string FirstResponseByKPI = "firstresponsebykpiid";
			public const string FirstResponseSent = "firstresponsesent";
			public const string FirstResponseSLAStatus = "firstresponseslastatus";
			public const string FollowUpBy = "followupby";
			public const string FollowupTaskCreated = "followuptaskcreated";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string CaseId = "incidentid";
			public const string CaseStage = "incidentstagecode";
			public const string InfluenceScore = "influencescore";
			public const string Decrementing = "isdecrementing";
			public const string IsEscalated = "isescalated";
			public const string KnowledgeBaseArticle = "kbarticleid";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string ArrivingPort = "ldv_arrivingport";
			public const string AvailablePharmacy = "ldv_availablepharmacy";
			public const string CaseType_ldv_CaseType = "ldv_casetype";
			public const string ChangeAppointmentType = "ldv_changeappointmenttype";
			public const string CheckStock = "ldv_checkstock";
			public const string ChildCase = "ldv_childcase";
			public const string Clinic = "ldv_clinic";
			public const string Comment = "ldv_comment";
			public const string CompleteCheckAvailableAppointmentsTask = "ldv_completecheckavailableappointmentstask";
			public const string CompletePhoneCallTask = "ldv_completephonecalltask";
			public const string CompleteSecondPhoneCallTask = "ldv_completesecondphonecalltask";
			public const string ContactPatientRelevant = "ldv_contactpatientrelevant";
			public const string CurrentAppointment = "ldv_currentappointment";
			public const string Doctor = "ldv_doctor";
			public const string ExporterName = "ldv_exportername";
			public const string ExportingCountry = "ldv_exportingcountry";
			public const string HospitalClinic = "ldv_hospital";
			public const string ICUDepartment = "ldv_icudepartment";
			public const string ImportedProduct = "ldv_importedproduct";
			public const string ImporterCompany = "ldv_importercompany";
			public const string InitialAppointment = "ldv_initialappointment";
			public const string InitialApproval = "ldv_initialapproval";
			public const string IsMedicationDelivered = "ldv_ismedicationdelivered";
			public const string Resolution_ldv_LackMedicationResolution = "ldv_lackmedicationresolution";
			public const string LastCallDate = "ldv_lastcalldate";
			public const string MadeinCountry = "ldv_madeincountry";
			public const string ManagerApproval = "ldv_managerapproval";
			public const string Medication = "ldv_medication";
			public const string MedicationAvailableOn = "ldv_medicationavailableon";
			public const string CaseType_ldv_MOACaseType = "ldv_moacasetype";
			public const string NewAppointment = "ldv_newappointment";
			public const string NewAppointmentFrom = "ldv_newappointmentfrom";
			public const string NewAppointmentResolution = "ldv_newappointmentresolution";
			public const string NewAppointmentTo = "ldv_newappointmentto";
			public const string NextDosageDate = "ldv_nextdosagedate";
			public const string Patient = "ldv_patient";
			public const string PaymentStatus = "ldv_paymentstatus";
			public const string Pharmacy = "ldv_pharmacy";
			public const string PreferredDate = "ldv_preferreddate";
			public const string Quantity = "ldv_quantity";
			public const string Relative = "ldv_relative";
			public const string RequestStatus = "ldv_requeststatus";
			public const string Resolution_ldv_Resolution = "ldv_resolution";
			public const string SentSurvey = "ldv_sentsurvey";
			public const string TimeSlotsStatus = "ldv_timeslotsstatus";
			public const string TotalPrice = "ldv_totalprice";
			public const string TotalPriceBase = "ldv_totalprice_base";
			public const string UnitPrice = "ldv_unitprice";
			public const string UnitPriceBase = "ldv_unitprice_base";
			public const string MasterCase = "masterid";
			public const string InternalUseOnly = "merged";
			public const string ReceivedAs = "messagetypecode";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedByExternalParty = "modifiedbyexternalparty";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string PartnerContact = "msa_partnercontactid";
			public const string Partner = "msa_partnerid";
			public const string FunctionalLocation = "msdyn_functionallocation";
			public const string IncidentType = "msdyn_incidenttype";
			public const string IoTAlert = "msdyn_iotalert";
			public const string CaseType_new_CaseType = "new_casetype";
			public const string CustomerArea = "new_customerarea";
			public const string tmtalmragat = "new_reviewed";
			public const string ChildCases = "numberofchildincidents";
			public const string OnHoldTimeMinutes = "onholdtime";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Owner = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentCase = "parentcaseid";
			public const string Contact_PrimaryContactId = "primarycontactid";
			public const string Priority = "prioritycode";
			public const string ProcessId = "processid";
			public const string Product = "productid";
			public const string SerialNumber = "productserialnumber";
			public const string ResolveBy = "resolveby";
			public const string ResolveByKPI = "resolvebykpiid";
			public const string ResolveBySLAStatus = "resolvebyslastatus";
			public const string FirstResponseBy = "responseby";
			public const string ResponsibleContact = "responsiblecontactid";
			public const string RouteCase = "routecase";
			public const string SentimentValue = "sentimentvalue";
			public const string ServiceStage = "servicestage";
			public const string Severity = "severitycode";
			public const string SLA = "slaid";
			public const string LastSLAapplied = "slainvokedid";
			public const string SocialProfile = "socialprofileid";
			public const string __DeprecatedStageId = "stageid";
			public const string Status = "statecode";
			public const string StatusReason = "statuscode";
			public const string Subject = "subjectid";
			public const string CaseNumber = "ticketnumber";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string CaseTitle = "title";
			public const string Currency = "transactioncurrencyid";
			public const string __DeprecatedTraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion
		}

		#endregion

		#endregion
	}

	#endregion

	#endregion

}

